{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$comment": "Restricted version of json-schema meta schema. It enforces the 'type' precense and doesn't support '$ref' and coumpound keywords ('anyOf', 'allOf', etc)",
  "title": "Core schema meta-schema",
  "definitions": {
    "schemaArray": {
      "type": "array",
      "minItems": 1,
      "items": { "$ref": "#" }
    },
    "nonNegativeInteger": {
      "type": "integer",
      "minimum": 0
    },
    "nonNegativeIntegerDefault0": {
      "allOf": [{ "$ref": "#/definitions/nonNegativeInteger" }, { "default": 0 }]
    },
    "simpleTypes": {
      "enum": ["array", "boolean", "integer", "null", "number", "object", "string"]
    },
    "stringArray": {
      "type": "array",
      "items": { "type": "string" },
      "uniqueItems": true,
      "default": []
    },

    "baseKeywords": {
      "type": "object",
      "properties": {
        "$schema": {
          "type": "string",
          "format": "uri"
        },
        "$comment": { "type": "string" },
        "title": { "type": "string" },
        "description": { "type": "string" },
        "default": true,
        "readOnly": {
          "type": "boolean",
          "default": false
        },
        "examples": {
          "type": "array",
          "items": true
        },
        "const": true,
        "enum": {
          "type": "array",
          "items": true,
          "minItems": 1,
          "uniqueItems": true
        },
        "type": { "$ref": "#/definitions/simpleTypes" },

        "title=": { "type": "string" },
        "description=": { "type": "string" },
        "default=": { "type": "string" },
        "examples=": { "type": "string" },
        "readOnly=": { "type": "string" },
        "const=": { "type": "string" },
        "enum=": { "type": "string" }
      },
      "required": ["type"]
    },
    "numberKeywords": {
      "type": "object",
      "properties": {
        "type": { "enum": ["number", "integer"] },

        "maximum": {
          "description": "Maximum (inclusive) allowed value.",
          "type": "number"
        },
        "exclusiveMaximum": {
          "description": "Minimum (exclusive) allowed value.",
          "type": "number"
        },
        "minimum": {
          "description": "Minimum (inclusive) allowed value.",
          "type": "number"
        },
        "exclusiveMinimum": {
          "description": "Minimum (exclusive) allowed value.",
          "type": "number"
        },
        "multipleOf": {
          "description": "The data to be valid should be a multiple of this value (i.e. the result of division of the data on the value should be integer)",
          "type": "number",
          "exclusiveMinimum": 0
        },

        "maximum=": {
          "description": "Expression returning the maximum (inclusive) allowed value.",
          "type": "string"
        },
        "exclusiveMaximum=": {
          "description": "Expression returning the maximum (exclusive) allowed value.",
          "type": "string"
        },
        "minimum=": {
          "description": "Expression returning the minimum (inclusive) allowed value.",
          "type": "string"
        },
        "exclusiveMinimum=": {
          "description": "Expression returning the minimum (exclusive) allowed value.",
          "type": "string"
        },
        "multipleOf=": {
          "description": "Expression returning the multiple to validate against",
          "type": "string"
        }
      }
    },
    "stringKeywords": {
      "type": "object",
      "properties": {
        "type": { "const": "string" },
        "maxLength": {
          "description": "Maximum number of allowed characters (inclusive). @remark Unicode pairs are NOT counted as a single character.",
          "$ref": "#/definitions/nonNegativeInteger"
        },
        "minLength": {
          "description": "Minimum number of allowed characters (inclusive). @remark Unicode pairs are NOT counted as a single character.",
          "$ref": "#/definitions/nonNegativeIntegerDefault0"
        },
        "pattern": {
          "description": "The data to be valid should match this regular expression pattern.",
          "type": "string",
          "format": "regex"
        },
        "format": {
          "description": "The data to be valid should match the predefined format with this name.",
          "type": "string"
        },

        "maxLength=": {
          "description": "Expression returning maximum number of allowed characters (inclusive). @remark Unicode pairs are NOT counted as a single character.",
          "type": "string"
        },
        "minLength=": {
          "description": "Expression returning minimum number of allowed characters (inclusive). @remark Unicode pairs are NOT counted as a single character.",
          "type": "string"
        },
        "pattern=": {
          "description": "Expression returning regular expression pattern to validate string.",
          "type": "string"
        },
        "format=": {
          "description": "Expression returning predefined format name to validate string.",
          "type": "string"
        }
      }
    },
    "booleanKeywords": {
      "type": "object",
      "properties": {
        "type": { "const": "boolean" }
      }
    },
    "arrayKeywords": {
      "type": "object",
      "properties": {
        "type": { "const": "array" },
        "additionalItems": {
          "anyOf": [{ "$ref": "#" }, { "type": "boolean" }],
          "items": {
            "anyOf": [{ "$ref": "#" }, { "$ref": "#/definitions/schemaArray" }],
            "default": true
          },
          "maxItems": { "$ref": "#/definitions/nonNegativeInteger" },
          "minItems": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },
          "uniqueItems": {
            "type": "boolean",
            "default": false
          },
          "contains": { "$ref": "#" },

          "maxItems=": { "type": "string" },
          "minItems=": { "type": "string" },
          "uniqueItems=": { "type": "string" }
        }
      },
      "objectKeywords": {
        "type": "object",
        "properties": {
          "type": { "const": "object" },
          "maxProperties": { "$ref": "#/definitions/nonNegativeInteger" },
          "minProperties": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },
          "required": { "$ref": "#/definitions/stringArray" },
          "additionalProperties": { "$ref": "#" },
          "properties": {
            "type": "object",
            "additionalProperties": { "$ref": "#" },
            "default": {}
          },
          "patternProperties": {
            "type": "object",
            "additionalProperties": { "$ref": "#" },
            "propertyNames": { "format": "regex" },
            "default": {}
          },
          "dependencies": {
            "type": "object",
            "additionalProperties": {
              "anyOf": [{ "$ref": "#" }, { "$ref": "#/definitions/stringArray" }]
            }
          },
          "propertyNames": { "$ref": "#" }
        }
      }
    },
    "objectKeywords": {
      "type": "object",
      "properties": {
        "properties": {
          "type": "object",
          "additionalProperties": { "$ref": "#" },
          "default": {}
        },
        "patternProperties": {
          "type": "object",
          "additionalProperties": { "$ref": "#" },
          "propertyNames": { "format": "regex" },
          "default": {}
        },
        "additionalProperties": { "$ref": "#" },
        "propertyNames": { "$ref": "#" },
        "required": { "$ref": "#/definitions/stringArray" }
      }
    }
  },
  "type": "object",

  "allOf": [
    { "$ref": "#definitions/baseKeywords" },
    {
      "oneOf": [
        { "$ref": "#definitions/numberKeywords" },
        { "$ref": "#definitions/stringKeywords" },
        { "$ref": "#definitions/booleanKeywords" },
        { "$ref": "#definitions/arrayKeywords" },
        { "$ref": "#definitions/objectKeywords" }
      ]
    },
    {
      "dependencies": {
        "maximum": { "type": "number" },
        "exclusiveMaximum": { "type": "number" },
        "minimum": { "type": "number" },
        "exclusiveMinimum": { "type": "number" },
        "multipleOf": { "type": "number" },
        "maximum=": { "type": "number" },
        "exclusiveMaximum=": { "type": "number" },
        "minimum=": { "type": "number" },
        "exclusiveMinimum=": { "type": "number" },
        "multipleOf=": { "type": "number" }
      }
    }
  ]
}
